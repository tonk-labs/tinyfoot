{"version":3,"sources":["../src/create.ts","../src/templates/react.ts"],"sourcesContent":["import { Command } from \"commander\";\nimport inquirer from \"inquirer\";\nimport chalk from \"chalk\";\nimport ora from \"ora\";\nimport fs from \"fs-extra\";\nimport path from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { ProjectPlan, TemplateType } from \"./types\";\nimport { createReactTemplate } from \"./templates/react\";\n\n/**\n * Resolves a package path by checking both local development and global installation paths\n * @param relativePath Path relative to the package root\n * @returns Resolved absolute path to the requested file/directory\n */\nasync function resolvePackagePath(relativePath: string): Promise<string> {\n  try {\n    // For ESM, get the directory name using import.meta.url\n    const moduleUrl = import.meta.url;\n    const moduleDirPath = path.dirname(fileURLToPath(moduleUrl));\n\n    // Try local development path first\n    const localPath = path.resolve(moduleDirPath, \"..\", relativePath);\n\n    if (await fs.pathExists(localPath)) {\n      return localPath;\n    } else {\n      // If local path doesn't exist, try global node_modules\n      const { execSync } = await import(\"child_process\");\n      const globalNodeModules = execSync(\"npm root -g\").toString().trim();\n\n      // Look for the package in global node_modules\n      const globalPath = path.join(\n        globalNodeModules,\n        \"@tonk/create\",\n        relativePath,\n      );\n\n      if (await fs.pathExists(globalPath)) {\n        return globalPath;\n      } else {\n        throw new Error(\n          `Could not locate ${relativePath} in local or global paths`,\n        );\n      }\n    }\n  } catch (error) {\n    console.error(`Error resolving path ${relativePath}:`, error);\n    throw error;\n  }\n}\n\n// Get package.json for version information\nlet packageJson;\n\ntry {\n  const packageJsonPath = await resolvePackagePath(\"package.json\");\n  packageJson = JSON.parse(fs.readFileSync(packageJsonPath, \"utf8\"));\n} catch (error) {\n  console.error(\"Error resolving package.json:\", error);\n  process.exit(1);\n}\n\nconst program = new Command();\n\n// Questions to understand project requirements\nconst projectQuestions = [\n  {\n    type: \"input\",\n    name: \"projectName\",\n    message: \"What is your project named?\",\n    default: \"my-tonk-app\",\n  },\n  {\n    type: \"list\",\n    name: \"projectType\",\n    message: \"What type of project are you building?\",\n    choices: [\n      \"Productivity System\",\n      \"Creative Tool\",\n      \"Professional Services\",\n      \"Community Space\",\n      \"Learning & Education\",\n      \"Other\",\n    ],\n  },\n  {\n    type: \"list\",\n    name: \"platform\",\n    message: \"What platform do you want to use?\",\n    choices: [\"react\"],\n  },\n  {\n    type: \"input\",\n    name: \"description\",\n    message: \"Briefly describe your project and its main functionality:\",\n  },\n];\n\n// Function to create project structure\nexport async function createProject(\n  projectName: string,\n  plan: ProjectPlan,\n  _templateName: TemplateType,\n) {\n  const spinner = ora(\"Creating project structure...\").start();\n  let projectPath = \"\";\n\n  try {\n    // Create project directory\n    projectPath = path.resolve(projectName);\n    await fs.ensureDir(projectPath);\n\n    // Find template path\n    let templatePath;\n    let templateName = _templateName === \"default\" ? \"react\" : _templateName;\n\n    try {\n      templatePath = await resolvePackagePath(`templates/${templateName}`);\n    } catch (error) {\n      console.error(\n        `Error resolving template path for \"${templateName}\":`,\n        error,\n      );\n      throw new Error(\n        `Could not locate template \"${templateName}\". Please ensure the package is installed correctly and the template exists.`,\n      );\n    }\n\n    // Ensure templatePath is defined before using it\n    if (!templatePath || !(await fs.pathExists(templatePath))) {\n      throw new Error(\n        `Template path not found for \"${templateName}\": ${templatePath}`,\n      );\n    }\n\n    // Switch on template type and call appropriate template creator\n    try {\n      switch (templateName) {\n        case \"react\":\n          await createReactTemplate(\n            projectPath,\n            projectName,\n            templatePath,\n            plan,\n          );\n          break;\n\n        default:\n          await createReactTemplate(\n            projectPath,\n            projectName,\n            templatePath,\n            plan,\n          );\n          break;\n      }\n    } catch (error) {\n      spinner.fail(`Failed to create ${templateName} project`);\n      console.error(error);\n      process.exit(1);\n    }\n  } catch (error) {\n    spinner.fail(\"Failed to setup project\");\n    console.error(error);\n    process.exit(1);\n  }\n  spinner.stop();\n}\n\nprogram\n  .name(\"create-app\")\n  .description(\"Create a new Tonk app\")\n  .version(packageJson.version, \"-v, --version\", \"Output the current version\")\n  .argument(\"[project-name]\", \"Name of the project to create\")\n  .action(async (projectNameArg) => {\n    console.log(chalk.bold(\"\\nTonk! ðŸš€\\n\"));\n\n    try {\n      // Prepare questions, removing projectName question if provided as argument\n      const questions = [...projectQuestions];\n      if (projectNameArg) {\n        // Remove the projectName question if name was provided as argument\n        const projectNameIndex = questions.findIndex(\n          (q) => q.name === \"projectName\",\n        );\n        if (projectNameIndex !== -1) {\n          questions.splice(projectNameIndex, 1);\n        }\n      }\n\n      // Get project details\n      const answers = await inquirer.prompt(questions);\n      const options = program.opts();\n\n      // If project name was provided as argument, add it to answers\n      if (projectNameArg) {\n        answers.projectName = projectNameArg;\n      }\n\n      // Generate project plan\n      const plan = answers;\n\n      // Create project with generated plan and template\n      const finalProjectName =\n        projectNameArg || options.name || answers.projectName || \"my-tonk-app\";\n      const templateName = answers.platform as TemplateType;\n      await createProject(finalProjectName, plan, templateName);\n    } catch (error) {\n      console.error(chalk.red(\"Error:\"), error);\n      process.exit(1);\n    }\n  });\n\nprogram.parse(process.argv);\n","import fs from \"fs-extra\";\nimport path from \"path\";\nimport ora from \"ora\";\nimport chalk from \"chalk\";\nimport { ProjectPlan } from \"../types\";\n\nexport async function createReactTemplate(\n  projectPath: string,\n  projectName: string,\n  templatePath: string,\n  plan: ProjectPlan,\n) {\n  const spinner = ora(\"Creating React project structure...\").start();\n\n  try {\n    // Copy template files\n    console.log(`Copying from: ${templatePath}`);\n    console.log(`Copying to: ${projectPath}`);\n\n    // List template contents before copying\n    const templateContents = await fs.readdir(templatePath);\n    console.log(`Template directory contains: ${templateContents.join(\", \")}`);\n\n    await fs.copy(templatePath, projectPath, {\n      filter: (src: string) => {\n        // Get the relative path from the template directory\n        const relativePath = path.relative(templatePath, src);\n        // Only filter out node_modules and .git within the template\n        const shouldCopy = !relativePath\n          .split(path.sep)\n          .some((part) => part === \"node_modules\" || part === \".git\");\n        if (!shouldCopy) {\n          console.log(`Skipping: ${relativePath}`);\n        }\n        return shouldCopy;\n      },\n      overwrite: true,\n      errorOnExist: false,\n    });\n\n    // Verify project contents after copying\n    const projectContents = await fs.readdir(projectPath);\n    console.log(\n      `Project directory now contains: ${projectContents.join(\", \")}`,\n    );\n\n    // Update package.json name\n    const packageJsonPath = path.join(projectPath, \"package.json\");\n    if (await fs.pathExists(packageJsonPath)) {\n      const packageJson = await fs.readJson(packageJsonPath);\n      packageJson.name = projectName;\n      await fs.writeJson(packageJsonPath, packageJson, { spaces: 2 });\n    }\n\n    // Create tonk.config.json with project plan\n    await fs.writeJSON(\n      path.join(projectPath, \"tonk.config.json\"),\n      {\n        name: projectName,\n        plan,\n        template: \"react\",\n      },\n      { spaces: 2 },\n    );\n\n    spinner.succeed(\"React project created successfully!\");\n\n    // Install dependencies\n    spinner.start(\"Installing dependencies...\");\n    const { execSync } = await import(\"child_process\");\n    process.chdir(projectPath);\n    execSync(\"npm install\", { stdio: \"inherit\" });\n    spinner.succeed(\"Dependencies installed successfully!\");\n\n    // Print next steps instructions\n    console.log(\"\\n\" + chalk.bold(\"ðŸŽ‰ Your Tonk react app is ready! ðŸŽ‰\"));\n    console.log(\"\\n\" + chalk.bold(\"Next steps:\"));\n    console.log(\n      \"  â€¢ \" + chalk.cyan(\"npm run dev\") + \" - Start the development server\",\n    );\n    console.log(\n      \"  â€¢ You may launch claude code or any other AI editor in this directory to begin coding.\\n\",\n    );\n  } catch (error) {\n    spinner.fail(\"Failed to create React project\");\n    console.error(error);\n    throw error;\n  }\n}\n"],"mappings":"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","names":["Command","inquirer","chalk","ora","fs","path","fileURLToPath","fs","path","ora","chalk","createReactTemplate","projectPath","projectName","templatePath","plan","spinner","templateContents","src","relativePath","shouldCopy","part","projectContents","packageJsonPath","packageJson","execSync","error","resolvePackagePath","relativePath","moduleUrl","moduleDirPath","path","fileURLToPath","localPath","fs","execSync","globalNodeModules","globalPath","error","packageJson","packageJsonPath","program","Command","projectQuestions","createProject","projectName","plan","_templateName","spinner","ora","projectPath","templatePath","templateName","createReactTemplate","projectNameArg","chalk","questions","projectNameIndex","q","answers","inquirer","options","finalProjectName"]}