#!/usr/bin/env node
import{Command as P}from"commander";import C from"inquirer";import k from"chalk";import E from"ora";import l from"fs-extra";import d from"path";import{fileURLToPath as $}from"url";import i from"fs-extra";import m from"path";import T from"ora";import f from"chalk";async function g(e,t,r,s){let a=T("Creating React project structure...").start();try{console.log(`Copying from: ${r}`),console.log(`Copying to: ${e}`);let o=await i.readdir(r);console.log(`Template directory contains: ${o.join(", ")}`),await i.copy(r,e,{filter:p=>{let h=m.relative(r,p),w=!h.split(m.sep).some(j=>j==="node_modules"||j===".git");return w||console.log(`Skipping: ${h}`),w},overwrite:!0,errorOnExist:!1});let n=await i.readdir(e);console.log(`Project directory now contains: ${n.join(", ")}`);let c=m.join(e,"package.json");if(await i.pathExists(c)){let p=await i.readJson(c);p.name=t,await i.writeJson(c,p,{spaces:2})}await i.writeJSON(m.join(e,"tonk.config.json"),{name:t,plan:s,template:"react"},{spaces:2}),a.succeed("React project created successfully!"),a.start("Installing dependencies...");let{execSync:u}=await import("child_process");process.chdir(e),u("npm install",{stdio:"inherit"}),a.succeed("Dependencies installed successfully!"),console.log(`
`+f.bold("\u{1F389} Your Tonk react app is ready! \u{1F389}")),console.log(`
`+f.bold("Next steps:")),console.log("  \u2022 "+f.cyan("npm run dev")+" - Start the development server"),console.log(`  \u2022 You may launch claude code or any other AI editor in this directory to begin coding.
`)}catch(o){throw a.fail("Failed to create React project"),console.error(o),o}}async function v(e){try{let t=import.meta.url,r=d.dirname($(t)),s=d.resolve(r,"..",e);if(await l.pathExists(s))return s;{let{execSync:a}=await import("child_process"),o=a("npm root -g").toString().trim(),n=d.join(o,"@tonk/create",e);if(await l.pathExists(n))return n;throw new Error(`Could not locate ${e} in local or global paths`)}}catch(t){throw console.error(`Error resolving path ${e}:`,t),t}}var x;try{let e=await v("package.json");x=JSON.parse(l.readFileSync(e,"utf8"))}catch(e){console.error("Error resolving package.json:",e),process.exit(1)}var y=new P,b=[{type:"input",name:"projectName",message:"What is your project named?",default:"my-tonk-app"},{type:"list",name:"projectType",message:"What type of project are you building?",choices:["Productivity System","Creative Tool","Professional Services","Community Space","Learning & Education","Other"]},{type:"list",name:"platform",message:"What platform do you want to use?",choices:["react"]},{type:"input",name:"description",message:"Briefly describe your project and its main functionality:"}];async function S(e,t,r){let s=E("Creating project structure...").start(),a="";try{a=d.resolve(e),await l.ensureDir(a);let o,n=r==="default"?"react":r;try{o=await v(`templates/${n}`)}catch(c){throw console.error(`Error resolving template path for "${n}":`,c),new Error(`Could not locate template "${n}". Please ensure the package is installed correctly and the template exists.`)}if(!o||!await l.pathExists(o))throw new Error(`Template path not found for "${n}": ${o}`);try{switch(n){case"react":await g(a,e,o,t);break;default:await g(a,e,o,t);break}}catch(c){s.fail(`Failed to create ${n} project`),console.error(c),process.exit(1)}}catch(o){s.fail("Failed to setup project"),console.error(o),process.exit(1)}s.stop()}y.name("create-app").description("Create a new Tonk app").version(x.version,"-v, --version","Output the current version").argument("[project-name]","Name of the project to create").action(async e=>{console.log(k.bold(`
Tonk! \u{1F680}
`));try{let t=[...b];if(e){let c=t.findIndex(u=>u.name==="projectName");c!==-1&&t.splice(c,1)}let r=await C.prompt(t),s=y.opts();e&&(r.projectName=e);let a=r,o=e||s.name||r.projectName||"my-tonk-app",n=r.platform;await S(o,a,n)}catch(t){console.error(k.red("Error:"),t),process.exit(1)}});y.parse(process.argv);export{S as createProject};
//# sourceMappingURL=create.js.map